package ${BASE_PACKAGE};

import com.olsonsolution.common.spring.domain.port.props.jpa.JpaProperties;
import com.olsonsolution.common.spring.domain.port.props.jpa.JpaSpecProperties;
import com.olsonsolution.common.spring.domain.port.repository.datasource.DestinationDataSourceManager;
import com.olsonsolution.common.spring.domain.port.repository.datasource.SqlDataSourceProvider;
import com.olsonsolution.common.spring.domain.port.repository.jpa.DataSourceSpecManager;
import com.olsonsolution.common.spring.domain.port.repository.jpa.EntityManagerFactoryDelegate;
import com.olsonsolution.common.spring.domain.port.repository.jpa.PlatformTransactionManagerDelegate;
import com.olsonsolution.common.spring.domain.service.jpa.MultiVendorEntityManagerFactory;
import com.olsonsolution.common.spring.domain.service.jpa.MultiVendorPlatformTransactionManager;
import org.apache.commons.lang3.StringUtils;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ${SPEC_NAME}JpaConfigurer {

    private static final String JPA_SPEC_NAME = "${SPEC_NAME}";

    private final EntityManagerFactoryDelegate entityManagerFactoryDelegate;

    private final PlatformTransactionManagerDelegate platformTransactionManagerDelegate;

    public JpaBeanFactory(JpaProperties jpaProperties,
                          DataSourceSpecManager dataSourceSpecManager,
                          SqlDataSourceProvider sqlDataSourceProvider,
                          DestinationDataSourceManager destinationDataSourceManager) {
        JpaSpecProperties specProperties = getJpaSpecProperties(jpaProperties);
        this.entityManagerFactoryDelegate = createEntityManagerFactoryDelegate(
                specProperties,
                jpaProperties,
                dataSourceSpecManager,
                sqlDataSourceProvider,
                destinationDataSourceManager
        );
        this.platformTransactionManagerDelegate = createPlatformTransactionManagerDelegate(
                dataSourceSpecManager,
                sqlDataSourceProvider,
                entityManagerFactoryDelegate
        );
    }

    @Bean(JPA_SPEC_NAME + "_entityManagerFactory")
    public EntityManagerFactoryDelegate entityManagerFactoryDelegate() {
        return entityManagerFactoryDelegate;
    }

    @Bean(JPA_SPEC_NAME + "_platformTransactionManager")
    public PlatformTransactionManagerDelegate platformTransactionManagerDelegate() {
        return platformTransactionManagerDelegate;
    }

    private static JpaSpecProperties getJpaSpecProperties(JpaProperties jpaProperties) {
        return jpaProperties.getJpaSpecificationsProperties()
                .stream()
                .filter(props -> isConfigForName(props))
                .findFirst()
                .orElseThrow();
    }

    private static EntityManagerFactoryDelegate createEntityManagerFactoryDelegate(
            JpaSpecProperties properties,
            JpaProperties jpaProperties,
            DataSourceSpecManager dataSourceSpecManager,
            SqlDataSourceProvider sqlDataSourceProvider,
            DestinationDataSourceManager destinationDataSourceManager) {
        String schema = properties.getSchema();
        String name = properties.getName();
        return new MultiVendorEntityManagerFactory(
                schema,
                name,
                jpaProperties,
                dataSourceSpecManager,
                sqlDataSourceProvider,
                destinationDataSourceManager
        );
    }

    private static PlatformTransactionManagerDelegate createPlatformTransactionManagerDelegate(
            DataSourceSpecManager dataSourceSpecManager,
            SqlDataSourceProvider sqlDataSourceProvider,
            EntityManagerFactoryDelegate entityManagerFactoryDelegate) {
        return new MultiVendorPlatformTransactionManager(
                dataSourceSpecManager,
                sqlDataSourceProvider,
                entityManagerFactoryDelegate
        );
    }

    private static boolean isConfigForName(JpaSpecProperties props) {
        String value = props.getName() == null ? props.getSchema() : props.getName();
        return StringUtils.equals(value, JPA_SPEC_NAME);
    }

}
