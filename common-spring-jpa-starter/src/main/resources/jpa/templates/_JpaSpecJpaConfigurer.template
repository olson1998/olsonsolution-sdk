package ${BASE_PACKAGE};

import com.github.benmanes.caffeine.cache.Cache;
import com.olsonsolution.common.spring.domain.model.datasource.DomainJpaSpecDataSource;
import com.olsonsolution.common.spring.domain.port.config.jpa.JpaSpecConfig;
import com.olsonsolution.common.caching.application.props.DefaultCachingProperties;
import com.olsonsolution.common.caching.domain.port.props.CachingProperties;
import com.olsonsolution.common.caching.domain.port.repository.InMemoryCacheFactory;
import com.olsonsolution.common.data.domain.port.repository.sql.SqlDataSourceFactory;
import com.olsonsolution.common.spring.domain.port.props.jpa.JpaProperties;
import com.olsonsolution.common.spring.domain.port.props.jpa.RoutingDataSourceProperties;
import com.olsonsolution.common.spring.domain.port.repository.datasource.DataSourceEvictor;
import com.olsonsolution.common.spring.domain.port.repository.datasource.DataSourceSpecManager;
import com.olsonsolution.common.spring.domain.port.repository.datasource.DestinationDataSourceManager;
import com.olsonsolution.common.spring.domain.port.repository.datasource.SqlDataSourceProvider;
import com.olsonsolution.common.spring.domain.port.repository.jpa.EntityManagerFactoryDelegate;
import com.olsonsolution.common.spring.domain.port.repository.jpa.JpaSpecConfigurer;
import com.olsonsolution.common.spring.domain.port.repository.jpa.JpaSpecDataSourceSpecManager;
import com.olsonsolution.common.spring.domain.port.stereotype.datasource.JpaDataSourceSpec;
import com.olsonsolution.common.spring.domain.service.datasource.RoutingDataSourceManagingService;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.transaction.PlatformTransactionManager;

import javax.annotation.processing.Generated;
import javax.sql.DataSource;

import static com.olsonsolution.common.spring.application.jpa.config.JpaConfig.DEFAULT_JPA_DATA_SOURCE_SPEC_BEAN;
import static com.olsonsolution.common.data.domain.model.sql.SqlPermissions.RWX;

@Configuration
@Generated(
        value = "${ANNOTATION_PROCESSOR}",
        date = "${TIMESTAMP}",
        comments = "${COMPILER}"
)
public class ${JPA_SPEC}JpaSpecConfigurer implements JpaSpecConfig, InitializingBean {

    private static final String JPA_SPEC = "${JPA_SPEC}";

    private static final String[] BASE_PACKAGES = ${ENTITY_BASE_PACKAGES};

    private String schema;

    private boolean createSchema;

    private final JpaSpecConfigurer jpaSpecConfigurer;

    private final DataSourceSpecManager dataSourceSpecManager;

    private final SqlDataSourceProvider sqlDataSourceProvider;

    @Autowired
    public ${JPA_SPEC}JpaSpecConfigurer(JpaSpecConfigurer jpaSpecConfigurer,
                                        DataSourceSpecManager dataSourceSpecManager,
                                        SqlDataSourceProvider sqlDataSourceProvider) {
        this.jpaSpecConfigurer = jpaSpecConfigurer;
        this.dataSourceSpecManager = dataSourceSpecManager;
        this.sqlDataSourceProvider = sqlDataSourceProvider;
    }

    @Override
    public String getSchema() {
        return schema;
    }

    @Override
    public boolean isCreateSchema() {
        return createSchema;
    }

    @Override
    public String getJpaSpec() {
        return JPA_SPEC;
    }

    @Bean(JPA_SPEC + "_destinationDataSourceManager")
    public DestinationDataSourceManager destinationDataSourceManager(JpaProperties jpaProperties,
                                                                     @Qualifier(DEFAULT_JPA_DATA_SOURCE_SPEC_BEAN)
                                                                     JpaDataSourceSpec defaultJpaDataSourceSpec,
                                                                     SqlDataSourceFactory sqlDataSourceFactory,
                                                                     SqlDataSourceProvider sqlDataSourceProvider,
                                                                     InMemoryCacheFactory inMemoryCacheFactory,
                                                                     DataSourceEvictor dataSourceEvictor) {
        RoutingDataSourceProperties routingDataSourceProperties = jpaProperties.getRoutingDataSource();
        int maximumDataSources = routingDataSourceProperties.getMaxDataSources();
        CachingProperties cachingProperties = new DefaultCachingProperties(
                maximumDataSources,
                (long) maximumDataSources,
                null,
                routingDataSourceProperties.getExpireTimeout(),
                null
        );
        Cache<JpaDataSourceSpec, DataSource> destinationDataSourceCache =
                inMemoryCacheFactory.fabricate(cachingProperties, null, null, dataSourceEvictor);
        return new RoutingDataSourceManagingService(
                defaultJpaDataSourceSpec,
                sqlDataSourceFactory,
                sqlDataSourceProvider,
                destinationDataSourceCache
        );
    }

    @Bean(JPA_SPEC + "_entityManagerFactoryDelegate")
    public EntityManagerFactoryDelegate entityManagerFactoryDelegate(
            @Qualifier(JPA_SPEC + "_destinationDataSourceManager") DestinationDataSourceManager destinationDataSourceManager,
            JpaSpecDataSourceSpecManager jpaSpecDataSourceSpecManager) {
        return jpaSpecConfigurer.createEntityManagerFactoryDelegate(
                JPA_SPEC,
                BASE_PACKAGES,
                dataSourceSpecManager,
                jpaSpecDataSourceSpecManager,
                sqlDataSourceProvider,
                destinationDataSourceManager
        );
    }

    @Bean(JPA_SPEC + "_platformTransactionManagerDelegate")
    public PlatformTransactionManager platformTransactionManager(
            @Qualifier(JPA_SPEC + "_entityManagerFactoryDelegate") EntityManagerFactoryDelegate entityManagerFactory) {
        return jpaSpecConfigurer.createPlatformTransactionManager(entityManagerFactory);
    }

    @Bean("enable " + JPA_SPEC + "JpaRepositories")
    public Enable${JPA_SPEC}JpaRepositories enableJpaRepositories() {
        return new Enable${JPA_SPEC}JpaRepositories();
    }

    @Override
    public void afterPropertiesSet() {
        this.schema = jpaSpecConfigurer.resolveSchema(JPA_SPEC);
        this.createSchema = jpaSpecConfigurer.resolveCreateSchema(JPA_SPEC);
    }


    @EnableJpaRepositories(
            basePackages = ${JPA_REPOS_BASE_PACKAGES},
            transactionManagerRef = JPA_SPEC + "_platformTransactionManagerDelegate",
            entityManagerFactoryRef = JPA_SPEC + "_entityManagerFactoryDelegate"
    )
    @Generated(
            value = "${ANNOTATION_PROCESSOR}",
            date = "${TIMESTAMP}",
            comments = "${COMPILER}"
    )
    public static class Enable${JPA_SPEC}JpaRepositories {

    }

}
